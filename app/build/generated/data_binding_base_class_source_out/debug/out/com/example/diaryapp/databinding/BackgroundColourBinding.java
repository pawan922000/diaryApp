// Generated by view binder compiler. Do not edit!
package com.example.diaryapp.databinding;

import android.view.LayoutInflater;
import android.view.View;
import android.view.ViewGroup;
import android.widget.LinearLayout;
import androidx.annotation.NonNull;
import androidx.annotation.Nullable;
import androidx.constraintlayout.widget.ConstraintLayout;
import androidx.viewbinding.ViewBinding;
import androidx.viewbinding.ViewBindings;
import com.example.diaryapp.R;
import com.google.android.material.floatingactionbutton.FloatingActionButton;
import java.lang.NullPointerException;
import java.lang.Override;
import java.lang.String;

public final class BackgroundColourBinding implements ViewBinding {
  @NonNull
  private final ConstraintLayout rootView;

  @NonNull
  public final LinearLayout color;

  @NonNull
  public final FloatingActionButton green;

  @NonNull
  public final FloatingActionButton pink;

  @NonNull
  public final FloatingActionButton purple;

  @NonNull
  public final FloatingActionButton white;

  @NonNull
  public final FloatingActionButton yellow;

  private BackgroundColourBinding(@NonNull ConstraintLayout rootView, @NonNull LinearLayout color,
      @NonNull FloatingActionButton green, @NonNull FloatingActionButton pink,
      @NonNull FloatingActionButton purple, @NonNull FloatingActionButton white,
      @NonNull FloatingActionButton yellow) {
    this.rootView = rootView;
    this.color = color;
    this.green = green;
    this.pink = pink;
    this.purple = purple;
    this.white = white;
    this.yellow = yellow;
  }

  @Override
  @NonNull
  public ConstraintLayout getRoot() {
    return rootView;
  }

  @NonNull
  public static BackgroundColourBinding inflate(@NonNull LayoutInflater inflater) {
    return inflate(inflater, null, false);
  }

  @NonNull
  public static BackgroundColourBinding inflate(@NonNull LayoutInflater inflater,
      @Nullable ViewGroup parent, boolean attachToParent) {
    View root = inflater.inflate(R.layout.background_colour, parent, false);
    if (attachToParent) {
      parent.addView(root);
    }
    return bind(root);
  }

  @NonNull
  public static BackgroundColourBinding bind(@NonNull View rootView) {
    // The body of this method is generated in a way you would not otherwise write.
    // This is done to optimize the compiled bytecode for size and performance.
    int id;
    missingId: {
      id = R.id.color;
      LinearLayout color = ViewBindings.findChildViewById(rootView, id);
      if (color == null) {
        break missingId;
      }

      id = R.id.green;
      FloatingActionButton green = ViewBindings.findChildViewById(rootView, id);
      if (green == null) {
        break missingId;
      }

      id = R.id.pink;
      FloatingActionButton pink = ViewBindings.findChildViewById(rootView, id);
      if (pink == null) {
        break missingId;
      }

      id = R.id.purple;
      FloatingActionButton purple = ViewBindings.findChildViewById(rootView, id);
      if (purple == null) {
        break missingId;
      }

      id = R.id.white;
      FloatingActionButton white = ViewBindings.findChildViewById(rootView, id);
      if (white == null) {
        break missingId;
      }

      id = R.id.yellow;
      FloatingActionButton yellow = ViewBindings.findChildViewById(rootView, id);
      if (yellow == null) {
        break missingId;
      }

      return new BackgroundColourBinding((ConstraintLayout) rootView, color, green, pink, purple,
          white, yellow);
    }
    String missingId = rootView.getResources().getResourceName(id);
    throw new NullPointerException("Missing required view with ID: ".concat(missingId));
  }
}
